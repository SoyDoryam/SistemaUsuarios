@{
    ViewData["Title"] = "Gestión de Usuarios";
}

<div class="container mt-4">
    <h1>@ViewData["Title"]</h1>

    <!-- Botón para abrir el modal para crear un nuevo usuario -->
    <button class="btn btn-success mb-3 btn-sm" data-bs-toggle="modal" data-bs-target="#usuarioModal" onclick="limpiarFormulario()">Crear Usuario</button>

    <!-- Tabla de usuarios -->
    <table class="table table-striped table-sm">
        <thead>
            <tr>
                <th>Nombre</th>
                <th>Email</th>
                <th>Teléfono</th>
                <th>Saldo</th>
                <th>Estado</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody id="usuariosTableBody"></tbody>
    </table>

    <!-- Modal para Crear/Editar Usuario -->
    <div class="modal fade" id="usuarioModal" tabindex="-1" aria-labelledby="usuarioModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="usuarioModalLabel">Crear/Editar Usuario</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="usuarioId" />
                    <div class="mb-3">
                        <label for="nombre" class="form-label">Nombre</label>
                        <input type="text" id="nombre" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="email" class="form-label">Email</label>
                        <input type="email" id="email" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="contrasena" class="form-label">Contraseña</label>
                        <input type="password" id="contrasena" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="telefono" class="form-label">Teléfono</label>
                        <input type="text" id="telefono" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="saldo" class="form-label">Saldo</label>
                        <input type="number" id="saldo" class="form-control" step="0.01" />
                    </div>
                    <div class="mb-3">
                        <label for="direccion" class="form-label">Dirección</label>
                        <input type="text" id="direccion" class="form-control" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="modal">Cerrar</button>
                    <button type="button" class="btn btn-primary btn-sm" onclick="guardarUsuario()">Guardar Usuario</button>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // Función para listar usuarios
    async function listarUsuarios() {
        try {
            const response = await fetch('/Usuario/ListarUsuarios', {
                method: 'GET',
                headers: { 'Content-Type': 'application/json' }
            });

            if (!response.ok) {
                throw new Error('Error al obtener los usuarios.');
            }

            const usuarios = await response.json();
            let usuariosHTML = '';

            usuarios.forEach(usuario => {
                usuariosHTML += `
                    <tr>
                        <td>${usuario.nombre}</td>
                        <td>${usuario.email}</td>
                        <td>${usuario.telefono}</td>
                        <td>${usuario.saldo}</td>
                        <td>${usuario.esActivo ? 'Activo' : 'Inactivo'}</td>
                        <td>
                            <button class="btn btn-warning btn-sm" onclick="editarUsuario(${usuario.id})" data-bs-toggle="modal" data-bs-target="#usuarioModal">Editar</button>
                            <button class="btn btn-danger btn-sm" onclick="eliminarUsuario(${usuario.id})">Eliminar</button>
                        </td>
                    </tr>
                `;
            });

            document.getElementById('usuariosTableBody').innerHTML = usuariosHTML;
        } catch (error) {
            console.error(error);
            alert('Hubo un error al cargar los usuarios.');
        }
    }

    // Función para obtener un usuario por ID
    async function obtenerUsuario(id) {
        try {
            const response = await fetch(`/Usuario/ObtenerUsuarioPorId?id=${id}`);
            const usuario = await response.json();
            return usuario;
        } catch (error) {
            console.error(error);
            alert('Error al obtener el usuario.');
        }
    }

    // Función para crear o editar un usuario
    async function guardarUsuario() {
        const id = document.getElementById('usuarioId').value;
        const usuario = {
            id: id ? parseInt(id) : 0,
            nombre: document.getElementById('nombre').value.trim(),
            email: document.getElementById('email').value.trim(),
            contrasena: document.getElementById('contrasena').value.trim(),
            telefono: document.getElementById('telefono').value.trim(),
            saldo: parseFloat(document.getElementById('saldo').value) || 0,
            direccion: document.getElementById('direccion').value.trim(),
            esActivo: true
        };

        // Validación de formulario
        if (!usuario.nombre || !usuario.email) {
            alert("El nombre y el email son obligatorios.");
            return;
        }

        if (usuario.id > 0) {
            // Actualizar usuario
            await actualizarUsuario(usuario);
        } else {
            // Crear nuevo usuario
            await crearUsuario(usuario);
        }
    }

    async function crearUsuario(usuario) {
        try {
            const response = await fetch('/Usuario/CrearUsuario', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(usuario)
            });

            const responseData = await response.json();
            if (response.ok) {
                alert('Usuario creado correctamente');
                listarUsuarios();
                limpiarFormulario();
                toggleModal();
            } else {
                alert('Error al crear el usuario: ' + responseData.mensaje);
            }
        } catch (error) {
            console.error(error);
            alert('Error al crear el usuario.');
        }
    }

    async function actualizarUsuario(usuario) {
        try {
            const response = await fetch('/Usuario/ActualizarUsuario', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(usuario)
            });

            const responseData = await response.json();
            if (response.ok) {
                alert('Usuario actualizado correctamente');
                listarUsuarios();
                limpiarFormulario();
                toggleModal();
            } else {
                alert('Error al actualizar el usuario: ' + responseData.mensaje);
            }
        } catch (error) {
            console.error(error);
            alert('Error al actualizar el usuario.');
        }
    }

    function toggleModal() {
        const modalElement = document.getElementById('usuarioModal');
        const modal = bootstrap.Modal.getInstance(modalElement);
        modal.toggle();
    }

    // Función para editar un usuario
    async function editarUsuario(id) {
        const usuario = await obtenerUsuario(id);
        document.getElementById('usuarioId').value = usuario.id;
        document.getElementById('nombre').value = usuario.nombre;
        document.getElementById('email').value = usuario.email;
        document.getElementById('telefono').value = usuario.telefono;
        document.getElementById('saldo').value = usuario.saldo;
        document.getElementById('direccion').value = usuario.direccion;
        document.getElementById('contrasena').value = ''; // No cargamos la contraseña
    }

    // Función para eliminar un usuario
    async function eliminarUsuario(id) {
        if (confirm("¿Estás seguro de que deseas eliminar este usuario?")) {
            try {
                const response = await fetch(`/Usuario/EliminarUsuario`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(id)
                });

                if (response.ok) {
                    alert('Usuario eliminado');
                    listarUsuarios();
                } else {
                    alert('Error al eliminar el usuario');
                }
            } catch (error) {
                console.error(error);
                alert('Error al eliminar el usuario.');
            }
        }
    }

    // Limpiar el formulario
    function limpiarFormulario() {
        document.getElementById('usuarioId').value = '';
        document.getElementById('nombre').value = '';
        document.getElementById('email').value = '';
        document.getElementById('telefono').value = '';
        document.getElementById('saldo').value = '';
        document.getElementById('direccion').value = '';
        document.getElementById('contrasena').value = '';
    }

    // Inicialización
    window.onload = listarUsuarios;
</script>
